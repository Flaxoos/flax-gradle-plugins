/*
 * Adapted from https://github.com/koral--/jacoco-gradle-testkit-plugin)
 *
 * MIT License
 *
 * Copyright (c) 2017 Karol Wr√≥tniak Droids On Roids LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Because the gradle test kit runs on a different jvm, in order to ge test coverage of the plugin under test,
 * the
 */
package io.flax.kover.gradle.testkit

import io.flax.kover.gradle.testkit.Names.KOVER_AGENT_RUNTIME_CONFIGURATION_NAME
import io.flax.kover.gradle.testkit.Names.KOVER_REPORTER_RUNTIME_CONFIGURATION_NAME
import io.flax.kover.gradle.testkit.Names.KOVER_TOOL_AGENT_NAME
import io.flax.kover.gradle.testkit.Names.KOVER_TOOL_GROUP_NAME
import io.flax.kover.gradle.testkit.Names.KOVER_TOOL_REPORTER_NAME
import kotlinx.kover.gradle.plugin.dsl.KoverVersions.KOVER_TOOL_VERSION
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.TaskProvider
import org.gradle.api.tasks.WriteProperties
import org.gradle.api.tasks.testing.Test
import org.gradle.util.GradleVersion
import java.io.File

/**
 * Gradle plugin that to enable Kover test coverage of gradle tasks and plugins run by the Gradle test kit
 */
class KoverGradleTestKitPlugin : Plugin<Project> {

    override fun apply(project: Project) {
        with(project) {
            pluginManager.withPlugin("org.jetbrains.kotlinx.kover") {

                val extension = extensions.create(
                    KoverGradleTestKitExtension.NAME,
                    KoverGradleTestKitExtension::class.java,
                    project,
                )

                with(extension) {
                    if (!task.isPresent || !testConfigurationRuntime.isPresent) {
                        project.logger.info("${KoverGradleTestKitExtension.NAME} not configured, make sure both task and testConfigurationRuntime are specified. skipping setup")
                        return@withPlugin
                    }

                    val taskProvider = task.get()
                    val testConfigurationRuntimeProvider = testConfigurationRuntime.get()

                    configurations.maybeCreate(KOVER_AGENT_RUNTIME_CONFIGURATION_NAME)
                        .setVisible(false)
                        .description = "Kover agent for TestKit"

                    configurations.maybeCreate(KOVER_REPORTER_RUNTIME_CONFIGURATION_NAME)
                        .setVisible(false)
                        .description = "Kover reporter for TestKit"

                    val koverTestKitPropertiesTask = registerTestKitPropertiesTask(taskProvider)
                    configureTaskDependencies(taskProvider, koverTestKitPropertiesTask)

                    dependencies.add(testConfigurationRuntimeProvider.name, files(testKitDir(taskProvider.name)))
                    taskProvider.configure { dependsOn(koverTestKitPropertiesTask) }

                    dependencies.add(
                        KOVER_AGENT_RUNTIME_CONFIGURATION_NAME,
                        "$KOVER_TOOL_GROUP_NAME:$KOVER_TOOL_AGENT_NAME:$KOVER_TOOL_VERSION",
                    )
                    dependencies.add(
                        KOVER_AGENT_RUNTIME_CONFIGURATION_NAME,
                        "$KOVER_TOOL_GROUP_NAME:$KOVER_TOOL_REPORTER_NAME:$KOVER_TOOL_VERSION",
                    )

                }
            }
        }
    }

    context (Project)
    private fun KoverGradleTestKitExtension.registerTestKitPropertiesTask(
        taskProvider: TaskProvider<Test>,
    ): TaskProvider<WriteProperties> = tasks.register(
        generatePropertiesTaskName(taskProvider.name),
        WriteProperties::class.java,
    ) {
        group = "verification"
        description = "Generates gradle.properties with Kover agent for TestKit"
        comment = "Generated by io.flax.kover.gradle.testkit"

        val testKitPropertiesFile =
            layout.buildDirectory.file("testkit/${taskProvider.name}/testkit-gradle.properties")
        if (GradleVersion.current() >= GradleVersion.version("8.1")) {
            destinationFile.set(testKitPropertiesFile)
        } else {
            @Suppress("DEPRECATION")
            outputFile = testKitPropertiesFile.get().asFile
        }

        // See [kotlinx.kover.gradle.plugin.tools.kover.KoverOnlineInstrumentation.kt]
        val javaAgentArg =
            taskProvider.get().temporaryDir.resolve("kover-agent.args").canonicalPath
                .let { argsFile ->
                    // can replace the provider with build/kover/intellij-coverage-agent-1.0.724.jar, like belwo
                    // "-javaagent:${findKoverToolAgent(project)}=$argsFile"
                    "-javaagent:${this@registerTestKitPropertiesTask.koverAgentRuntimePathProvider.get()}=$argsFile"
                }

        property("org.gradle.jvmargs", javaAgentArg)
    }.also {
        configureTaskDependencies(taskProvider, it)
    }

    private fun Project.configureTaskDependencies(
        taskProvider: TaskProvider<Test>,
        koverTestKitPropertiesTask: TaskProvider<WriteProperties>?,
    ) {
        tasks.matching {
            it.name.lowercase()
                .matches(Regex(".*compile${taskProvider.get().name.lowercase()}kotlin.*"))
        }.forEach {
            it.dependsOn(koverTestKitPropertiesTask)
        }
    }

    private fun findKoverToolAgent(project: Project): Provider<File> =
        project.layout.buildDirectory.dir("kover").map {
            it.files()
                .find { it.name.contains("$KOVER_TOOL_AGENT_NAME") } ?: error("No kover agent found")
        }
}
